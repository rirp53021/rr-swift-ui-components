# Project Rules for Cursor AI (Swift Projects)

You are assisting in building professional-grade Swift projects.  
Follow these rules at all times:

## Code Quality
- Never use force unwrapping (`!`). Always prefer `guard let` or `if let`.
- Always handle errors using `do/catch` or `Result`, never ignore errors.
- Write clean, idiomatic Swift using SwiftLint conventions.
- Prefer `async/await` over completion handlers for concurrency.
- Use dependency injection instead of singletons.
- Avoid ternary operators, always use explicit `if/else`.

## Architecture
- Follow MVVM with Clean Architecture principles:
  - **View**: only UI, no business logic.
  - **ViewModel**: exposes state & actions, talks to Use Cases.
  - **Use Cases**: encapsulate business rules.
  - **Repositories/Services**: handle persistence, APIs, etc.
- Do not let Views access Services directly.
- Keep functions small, single-responsibility, and testable.

## Project Structure
- Source code goes in `Sources/`.
- Tests go in `Tests/` mirroring source structure.
- Provide a `Package.swift` when possible.
- Use semantic versioning (`MAJOR.MINOR.PATCH`).

## Documentation
- Every public type and method must include SwiftDoc (`///`) comments.
- Keep `README.md` updated with install, usage, and examples.
- Maintain `CHANGELOG.md` for version history.

## Testing
- All new features must include unit tests in `Tests/`.
- Write tests for edge cases (empty data, invalid input, network errors).
- Use Testing framework instead XCFramework

## Git & Repo Standards
- Use lowercase-hyphen names for repos (e.g., `swift-networking`).
- Add `.gitignore`, `LICENSE`, and `README.md` to every repo.
- Write clear commit messages (e.g., `feat: add APIClient`, `fix: handle 401 errors`).
- Tag releases with semantic versioning.

## Design System (MANDATORY)
- **ALL UI components MUST use the design system** - this is non-negotiable.
- **ALL colors MUST use ThemeProvider** - never use system colors like `.blue`, `.red`, `.white`, `.black`, `.gray`, `.secondary`, `.primary`, `.accentColor(.blue)`.
- Use `@Environment(\.themeProvider)` and `theme.colors.xxx` for all color references to guarantee dark mode support.
- Use `DesignTokens` for all styling: colors, typography, spacing, border radius, elevation, animations.
- Use `ThemeProvider` for theme-aware components and dynamic theming.
- Never use hardcoded values for colors, fonts, spacing, or other design properties.
- All components must support size variants (xs, sm, md, lg, xl) using `DesignTokens.ComponentSize`.
- All text components must use `DesignTokens.Typography` fonts and weights.
- All color usage must reference `theme.colors.xxx` (for dynamic theming) or `DesignTokens.Colors.xxx` (for static contexts like previews).
- All spacing must use `DesignTokens.Spacing` values.
- All border radius must use `DesignTokens.BorderRadius` values.
- All shadows/elevation must use `DesignTokens.Elevation` values.
- All animations must use `DesignTokens.Animation` values.
- **FORBIDDEN**: Any usage of system colors like `Color.blue`, `Color.red`, `Color.white`, `Color.black`, `Color.gray`, `.secondary`, `.primary`, `.accentColor(.blue)`, etc.

## Security
- Never commit API keys, secrets, or credentials.
- Use `.env` or secure storage for sensitive configs.
- Keep dependencies minimal and updated.
